---
name: DEV BUILD
on: 
  workflow_dispatch:
    inputs:
      react_run_id:
        description: 'React Workflow run_id'     
        required: true
        default: 'warning'
      app_distribution_group:
        description: 'App distribution group'
        required: false
        default: ''

jobs:
  nightly:
    name: React Release Build
    if: github.repository_owner != 'ProteGO-Safe'
    runs-on: ubuntu-latest
    env:
      PROTEGO_KEYSTORE_FILE: protegosafe-stage.jks
      PROTEGO_KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
      PROTEGO_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      REACT_RUN_ID: ${{ github.event.inputs.react_run_id }}
      APP_DISTRIBUTION_GROUP: ${{ github.event.inputs.app_distribution_group }}
      APP_DISTRIBUTION_KEY_ENCRYPTED: ${{ secrets.APP_DISTRIBUTION_KEY_ENCRYPTED }}
      REACT_TOKEN_SCRIPT: ${{ secrets.REACT_TOKEN_SCRIPT }}
      PRIVATE_KEY: ${{ secrets.CI_PRIVATE_KEY }}
      PUBLIC_KEY: ${{ secrets.CI_PUBLIC_KEY }}

    steps:
      - name: Clone Repository
        uses: actions/checkout@v2

      - name: Setup Python 3.8  
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install authlib
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Get specified UI artifact
        run: |
          mkdir -p .ssh ;
          echo "${PRIVATE_KEY}" | base64 --decode > .ssh/private.pem && chmod 0400 .ssh/private.pem ;
          echo "${PUBLIC_KEY}" | base64 --decode > .ssh/public.pem && chmod 0400 .ssh/public.pem ;
          echo "${REACT_TOKEN_SCRIPT}" | base64 --decode > getToken && chmod +x getToken ;
          REACT_TOKEN="$(sh -c './getToken')" ;
          repoID=$(curl -s -H "Authorization: Bearer ${REACT_TOKEN}" -H "Accept: application/vnd.github.machine-man-preview+json" https://api.github.com/app/installations |jq '.[0].id' |sed 's/"//g') ;
          JWT=$(curl -s -X POST -H "Authorization: Bearer ${REACT_TOKEN}" -H "Accept: application/vnd.github.v3+json" -H "Accept: application/vnd.github.machine-man-preview+json" https://api.github.com/app/installations/${repoID}/access_tokens |jq '.token' |sed 's/"//g') ;
          curl -s -H "Authorization: token ${JWT}" -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/SafeSafe-app/pwa/actions/runs/${REACT_RUN_ID}/artifacts ;
          rm -f ui/ui.zip ;
          REACT_BUILD_URL=$(curl -s -H "Authorization: token ${JWT}" -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/SafeSafe-app/pwa/actions/runs/${REACT_RUN_ID}/artifacts |jq '.artifacts[].archive_download_url' |sed 's/"//g') ;
          if [ ! -z $REACT_BUILD_URL ]; then 
            curl -s -L -o ui/ui.zip -H "Authorization: Bearer ${JWT}" -H 'Accept: application/vnd.github.v3+json' ${REACT_BUILD_URL};
            echo "Finished downloading artifact from React run_id=${REACT_RUN_ID}";
          else
            echo "NO ARTIFACT FOUND IN RUN # ${REACT_RUN_ID}";
          fi;

      - name: Setup Environment (JDK)
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 4)

      - name: Setup Environment (Keystore)
        run: |
          echo "${{ secrets.KEYSTORE }}" > stage.keystore.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSWORD }}" --batch stage.keystore.asc > $PROTEGO_KEYSTORE_FILE
          cp $PROTEGO_KEYSTORE_FILE app/$PROTEGO_KEYSTORE_FILE

      - name: Ktlint
        run: ./gradlew ktlint -PPROTEGO_KEYSTORE_DEBUG_FILE=$PROTEGO_KEYSTORE_FILE -PPROTEGO_KEYSTORE_DEBUG_PASSWORD=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_ALIAS=$PROTEGO_KEYSTORE_ALIAS

      - name: Install NDK
        run: echo "y" | sudo /usr/local/lib/android/sdk/tools/bin/sdkmanager --install "ndk;21.0.6113669" --sdk_root=${ANDROID_SDK_ROOT}

      - name: Cleanup
        run: ./gradlew clean -PPROTEGO_KEYSTORE_DEBUG_FILE=$PROTEGO_KEYSTORE_FILE -PPROTEGO_KEYSTORE_DEBUG_PASSWORD=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_ALIAS=$PROTEGO_KEYSTORE_ALIAS

      - name: Run Unit Tests
        run: ./gradlew testProdReleaseUnitTest -PPROTEGO_KEYSTORE_DEBUG_FILE=$PROTEGO_KEYSTORE_FILE -PPROTEGO_KEYSTORE_DEBUG_PASSWORD=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_ALIAS=$PROTEGO_KEYSTORE_ALIAS

      - name: Assemble Stage Debug (Signed Stage Keystore)
        if: github.event.inputs.app_distribution_group == ''
        run: ./gradlew assembleStageDebug -Pandroid.injected.signing.store.file=$PROTEGO_KEYSTORE_FILE -Pandroid.injected.signing.store.password=$PROTEGO_KEYSTORE_PASSWORD -Pandroid.injected.signing.key.alias=$PROTEGO_KEYSTORE_ALIAS -Pandroid.injected.signing.key.password=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_FILE=$PROTEGO_KEYSTORE_FILE -PPROTEGO_KEYSTORE_DEBUG_PASSWORD=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_ALIAS=$PROTEGO_KEYSTORE_ALIAS

      - name: Assemble Stage Debug and upload to App Distribution for specified group(Signed Stage Keystore)
        if: github.event.inputs.app_distribution_group != ''
        run: |
          mkdir -p appdistribution
          echo "${APP_DISTRIBUTION_KEY_ENCRYPTED}" | base64 --decode > appdistribution/app_distribution.json
          echo "${APP_DISTRIBUTION_GROUP}" > appdistribution/groups_file.txt
          echo "Stage Debug uploaded by CI
          Android run_id=$GITHUB_RUN_ID
          Android branch=${{ steps.get_version.outputs.VERSION }}
          React run_id=${REACT_RUN_ID}" > appdistribution/release_notes.txt
          ./gradlew assembleStageDebug appDistributionUploadStageDebug -Pandroid.injected.signing.store.file=$PROTEGO_KEYSTORE_FILE -Pandroid.injected.signing.store.password=$PROTEGO_KEYSTORE_PASSWORD -Pandroid.injected.signing.key.alias=$PROTEGO_KEYSTORE_ALIAS -Pandroid.injected.signing.key.password=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_FILE=$PROTEGO_KEYSTORE_FILE -PPROTEGO_KEYSTORE_DEBUG_PASSWORD=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_ALIAS=$PROTEGO_KEYSTORE_ALIAS

      - name: Assemble Stage Release (Signed Stage Keystore)
        run: ./gradlew assembleStageRelease -Pandroid.injected.signing.store.file=$PROTEGO_KEYSTORE_FILE -Pandroid.injected.signing.store.password=$PROTEGO_KEYSTORE_PASSWORD -Pandroid.injected.signing.key.alias=$PROTEGO_KEYSTORE_ALIAS -Pandroid.injected.signing.key.password=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_FILE=$PROTEGO_KEYSTORE_FILE -PPROTEGO_KEYSTORE_DEBUG_PASSWORD=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_ALIAS=$PROTEGO_KEYSTORE_ALIAS

      - name: Assemble Stage SauceLab (Signed Stage Keystore)
        run: ./gradlew assembleStageSauceLab -Pandroid.injected.signing.store.file=$PROTEGO_KEYSTORE_FILE -Pandroid.injected.signing.store.password=$PROTEGO_KEYSTORE_PASSWORD -Pandroid.injected.signing.key.alias=$PROTEGO_KEYSTORE_ALIAS -Pandroid.injected.signing.key.password=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_FILE=$PROTEGO_KEYSTORE_FILE -PPROTEGO_KEYSTORE_DEBUG_PASSWORD=$PROTEGO_KEYSTORE_PASSWORD -PPROTEGO_KEYSTORE_DEBUG_ALIAS=$PROTEGO_KEYSTORE_ALIAS

      - name: Upload APKs
        uses: actions/upload-artifact@v2
        with:
          name: "${{ github.run_id }}_${{ steps.get_version.outputs.VERSION }}_apks"
          path: app/build/outputs/apk/*